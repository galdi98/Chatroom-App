/** * This program is a rudimentary demonstration of Swing GUI programming. * Note, the default layout manager for JFrames is the border layout. This * enables us to position containers using the coordinates South and Center. * * Usage: *	java ChatScreen * * When the user enters text in the textfield, it is displayed backwards  * in the display area. */import java.awt.*;import java.awt.event.*;import javax.swing.*;import javax.swing.border.*;import java.io.*;import java.net.*;@SuppressWarnings("serial")public class ChatScreen extends JFrame implements ActionListener, KeyListener{	private JButton sendButton;	private JButton exitButton;	private JTextField sendText;	private JTextArea displayArea;	private BufferedWriter toServer;	private String user;	public ChatScreen(Socket server, String user) throws IOException {		/**		 * a panel used for placing components		 */		JPanel p = new JPanel();		this.user = user;		toServer = new BufferedWriter(new OutputStreamWriter(server.getOutputStream()));		Border etched = BorderFactory.createEtchedBorder();		Border titled = BorderFactory.createTitledBorder(etched, "Enter Message Here ...");		p.setBorder(titled);		/**		 * set up all the components		 */		sendText = new JTextField(30);		sendButton = new JButton("Send");		exitButton = new JButton("Exit");		/**		 * register the listeners for the different button clicks		 */		sendText.addKeyListener(this);		sendButton.addActionListener(this);		exitButton.addActionListener(this);		/**		 * add the components to the panel		 */		p.add(sendText);		p.add(sendButton);		p.add(exitButton);		/**		 * add the panel to the "south" end of the container		 */		getContentPane().add(p,"South");		/**		 * add the text area for displaying output. Associate		 * a scrollbar with this text area. Note we add the scrollpane		 * to the container, not the text area		 */		displayArea = new JTextArea(15,40);		displayArea.setEditable(false);		displayArea.setFont(new Font("SansSerif", Font.PLAIN, 14));		JScrollPane scrollPane = new JScrollPane(displayArea);		getContentPane().add(scrollPane,"Center");		/**		 * set the title and size of the frame		 */		setTitle("WestmApp Chatroom");		pack();		setVisible(true);		sendText.requestFocus();		/** anonymous inner class to handle window closing events */		addWindowListener(new WindowAdapter() {			public void windowClosing(WindowEvent evt) {				System.exit(0);			}		} );	}	/**	 * Displays a message	 * @throws IOException 	 */	public void displayMessage(String message) throws IOException {		/*String u = message.substring(message.indexOf(" ")+1, message.indexOf(" ", message.indexOf(" ")+1));		String m = message.substring(message.indexOf(" ", message.indexOf(" ")+1)+1);*/		String[] x = message.split(" ");		if(x[0].equals("CRP1.0JOIN")){			displayArea.append("New user- "+x[1]+" -has entered the chat!\r\n");		}		if(x[0].equals("CRP1.0LEAVE")) {			displayArea.append(x[1]+" just left the chat!\r\n");		}		if(x[0].equals("CRP1.0SEND")) {			displayArea.append(x[1]+": ");			for(int i=2; i<x.length; i++) {				displayArea.append(x[i]+" ");			};			displayArea.append("\r\n");		}	}	/**	 * This gets the text the user entered and outputs it	 * in the display area.	 * @throws IOException 	 */	public void displayText() throws IOException{		String message = sendText.getText().trim();		sendMessage(message);		sendText.setText("");		sendText.requestFocus();	}	public void sendMessage(String message) throws IOException  {		if(message.startsWith("CRP1.0JOIN ")){			toServer.write(message+"\r\n");			toServer.flush();		} else {			toServer.write("CRP1.0SEND "+user+" "+message+"\r\n");			toServer.flush();		}	}	/**	 * This method responds to action events .... i.e. button clicks	 * and fulfills the contract of the ActionListener interface.	 */	public void actionPerformed(ActionEvent evt) {		Object source = evt.getSource();		if (source == sendButton)			try {				displayText();			} catch (IOException e) { }		else if (source == exitButton) {			try {				toServer.write("CRP1.0LEAVE "+user+"\r\n");				toServer.flush();			} catch (IOException e) {				e.printStackTrace();			}			System.exit(0);		}	}	/**	 * These methods responds to keystroke events and fulfills	 * the contract of the KeyListener interface.	 */	/**	 * This is invoked when the user presses	 * the ENTER key.	 */	public void keyPressed(KeyEvent e) { 		if (e.getKeyCode() == KeyEvent.VK_ENTER)			try {				displayText();			} catch (IOException e1) { }	}	/** Not implemented */	public void keyReleased(KeyEvent e) { }	/** Not implemented */	public void keyTyped(KeyEvent e) {  }	public static void main(String[] args) {		try {			Socket server= new Socket(args[0], 15001);			ChatScreen win = new ChatScreen(server, args[1]);			win.sendMessage("CRP1.0JOIN "+args[1]);			Thread ReaderThread = new Thread(new ReaderThread(server, win));			ReaderThread.start();			//win.sendMessage("CRP1.0LEAVE " + args[1]);		}		catch (UnknownHostException uhe) { System.out.println(uhe); }		catch (IOException ioe) { System.out.println(ioe); }	}}